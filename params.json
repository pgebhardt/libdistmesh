{"name":"libDistMesh","tagline":"libDistMesh: A Simple Mesh Generator in C++","body":"libDistMesh: A Simple Mesh Generator in C++\r\n==============================================\r\n\r\nlibDistMesh is a C++ implementation of the original [DistMesh](http://persson.berkeley.edu/distmesh/)\r\nalgorithm for generating unstructured triangular and tetrahedral meshes using *signed distance functions*.\r\n\r\nGetting Started\r\n---------------\r\n\r\nSimply clone the repository, update submodules and make sure all dependencies are installed.\r\nFor building the project the [SCons](http://www.scons.org/) build system is used:\r\n\r\n    git clone https://github.com/schansge/libdistmesh.git\r\n    git submodule update --init\r\n    scons\r\n    scons install\r\n\r\nExample\r\n-------\r\n\r\n* Uniform Mesh on Unit Circle:\r\n\r\n```\r\n#include <distmesh/distmesh.h>\r\n\r\nint main() {\r\n    // bounding box in which the algorithm tries to create points\r\n    distmesh::dtype::array<distmesh::dtype::real> bounding_box(2, 2);\r\n    bounding_box << -1.0, 1.0, -1.0, 1.0;\r\n\r\n    // create mesh\r\n    auto mesh = distmesh::distmesh(\r\n        distmesh::distance_function::circular(1.0),\r\n        distmesh::edge_length_function::uniform(),\r\n        0.2, bounding_box);\r\n\r\n    return 0;\r\n}\r\n```\r\n* Rectangle with circular hole, refined at circle boundary:\r\n\r\n```\r\n#include <distmesh/distmesh.h>\r\n\r\nint main() {\r\n    // bounding box in which the algorithm tries to create points\r\n    distmesh::dtype::array<distmesh::dtype::real> bounding_box(2, 2);\r\n    bounding_box << -1.0, 1.0, -1.0, 1.0;\r\n\r\n    // fixed points at the corners of domain to guarantee convergence\r\n    distmesh::dtype::array<distmesh::dtype::real> fixed_points(4, 2);\r\n    fixed_points << -1.0, -1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0;\r\n\r\n    // create mesh\r\n    auto mesh = distmesh::distmesh(\r\n        distmesh::distance_function::rectangular(bounding_box)\r\n            .max(-distmesh::distance_function::circular(0.5)),\r\n        0.05 + 0.3 * distmesh::distance_function::circular(0.5),\r\n        0.05, bounding_box, fixed_points);\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\nDependencies\r\n------------\r\n\r\nlibDistMesh uses some C++11 features and compiles properly with both clang\r\nand gcc. For linear algebra operations and the delaunay triangulation two\r\nlibraries are needed for building and using libDistMesh:\r\n\r\n* [Eigen](http://eigen.tuxfamily.org/) 3.2.0\r\n* [QHull](http://www.qhull.org/) 2012.1 (building only)\r\n\r\nReferences\r\n----------\r\n\r\nThe DistMesh algorithm is described in the following two references.\r\nIf you use the algorithm in a program or publication, please\r\nacknowledge its authors by adding a reference to the first paper\r\nbelow.\r\n\r\n* P.-O. Persson, G. Strang, **A Simple Mesh Generator in MATLAB**.\r\n  *SIAM Review*, Volume 46 (2), pp. 329-345, June 2004 ([PDF]\r\n  (http://persson.berkeley.edu/distmesh/persson04mesh.pdf>))\r\n\r\n* P.-O. Persson, **Mesh Generation for Implicit Geometries**.\r\n  Ph.D. thesis, *Department of Mathematics, MIT*, Dec 2004 ([PDF]\r\n  (http://persson.berkeley.edu/thesis/persson-thesis-color.pdf))\r\n","google":"UA-43124650-1","note":"Don't delete this file! It's used internally to help with page regeneration."}